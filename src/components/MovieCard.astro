---
interface Props {
    id: number;
    title: string;
    posterUrl: string | null;
    year?: string | number;
    rating?: number;
    showAddButton?: boolean;
    apiBaseUrl: string;
}

const { id, title, posterUrl, year, rating, showAddButton = false, apiBaseUrl } = Astro.props;
---

<div class="movie-card">
    <div class="poster-container">
        {posterUrl ? (
            <img 
                src={posterUrl} 
                alt={`${title} poster`} 
                class="poster"
                loading="lazy"
                onerror="this.src='/images/no-poster.jpg'"
            />
        ) : (
            <div class="no-poster">
                <span>No Image</span>
            </div>
        )}
        <div class="rating">{rating !== undefined ? rating.toFixed(1) : 'N/A'}</div>
    </div>
    <div class="movie-info">
        <h3 class="title">{title}</h3>
        {year !== undefined && <p class="year">{year}</p>}
        {showAddButton && (
            <button class="add-button" data-movie-id={id} data-api-base-url={apiBaseUrl} data-movie-title={title} data-poster-url={posterUrl}>
                Add to Watchlist
            </button>
        )}
    </div>
</div>

<style>
    .movie-card {
        background: #1a1a1a;
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.3s ease;
        position: relative;
    }

    .movie-card:hover {
        transform: translateY(-5px);
    }

    .poster-container {
        position: relative;
        padding-top: 150%;
        background: #2d2d2d;
    }

    .poster {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .no-poster {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #2d2d2d;
        color: #666;
    }

    .rating {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    .movie-info {
        padding: 1rem;
    }

    .title {
        margin: 0;
        font-size: 1rem;
        color: white;
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .year {
        margin: 0.5rem 0;
        color: #888;
        font-size: 0.9rem;
    }

    .add-button {
        width: 100%;
        padding: 0.5rem;
        background: #e94560;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 500;
    }

    .add-button:hover {
        background: #d13652;
    }

    .add-button:disabled {
        background: #4CAF50;
        cursor: not-allowed;
    }

    .add-button.added {
        background: #4CAF50;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const addButtons = document.querySelectorAll('.add-button');
        
        addButtons.forEach(button => {
            button.addEventListener('click', async (e) => {
                e.preventDefault();
                const movieId = (e.currentTarget as HTMLButtonElement).dataset.movieId;
                const apiBaseUrl = (e.currentTarget as HTMLButtonElement).dataset.apiBaseUrl;
                const movieTitle = (e.currentTarget as HTMLButtonElement).dataset.movieTitle;
                const posterUrl = (e.currentTarget as HTMLButtonElement).dataset.posterUrl;
                
                if (!movieId || !apiBaseUrl) {
                    console.error('Missing required data:', { movieId, apiBaseUrl });
                    return;
                }

                // Disable the button immediately to prevent double-clicks
                const button = e.currentTarget as HTMLButtonElement;
                button.disabled = true;
                const originalText = button.textContent;
                button.textContent = 'Adding...';

                try {
                    const token = localStorage.getItem('token');
                    if (!token) {
                        window.location.href = '/signup';
                        return;
                    }

                    // Decode the JWT token to get the user ID
                    const tokenPayload = JSON.parse(atob(token.split('.')[1]));
                    const userId = parseInt(tokenPayload['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier']);
                    
                    if (!userId || isNaN(userId)) {
                        localStorage.removeItem('token');
                        window.location.href = '/signup';
                        return;
                    }

                    const requestBody = {
                        userId: userId,
                        movieId: parseInt(movieId),
                        movieTitle: movieTitle,
                        posterUrl: posterUrl || null
                    };

                    console.log('Sending request with data:', requestBody);

                    const response = await fetch(`${apiBaseUrl}/watchlist`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(requestBody)
                    });

                    let responseData;
                    try {
                        responseData = await response.json();
                        console.log('Server response:', responseData);
                    } catch (parseError) {
                        console.error('Error parsing server response:', parseError);
                        throw new Error('Server returned an invalid response. Please try again.');
                    }

                    if (!response.ok) {
                        if (response.status === 400) {
                            if (responseData.message === 'User not found') {
                                localStorage.removeItem('token');
                                window.location.href = '/signup';
                                return;
                            }
                            throw new Error(responseData.message || 'Failed to add movie to watchlist');
                        }
                        throw new Error(responseData.message || 'Failed to add movie to watchlist');
                    }

                    // Update button state if it still exists
                    if (button && button.isConnected) {
                        button.textContent = 'Added to Watchlist';
                        button.classList.add('added');
                    } else {
                        alert('Movie added to watchlist successfully!');
                    }
                } catch (error) {
                    console.error('Error adding movie to watchlist:', error);
                    const errorMessage = error instanceof Error ? error.message : 'Failed to add movie to watchlist. Please try again.';
                    alert(errorMessage);
                    
                    // Reset button state if it still exists
                    if (button && button.isConnected) {
                        button.disabled = false;
                        button.textContent = originalText;
                    }
                }
            });
        });
    });
</script>
