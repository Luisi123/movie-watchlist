---
import MainLayout from '../layouts/MainLayout.astro';
import Header from '../components/header.astro';
import Footer from '../components/footer.astro';
import MovieCard from '../components/MovieCard.astro';
import '../styles/global.css';
---

<MainLayout>
    <Header slot="header" />
    
    <section class="watchlist-section">
        <div class="container">
            <h1 class="watchlist-title">My Watchlist</h1>
            
            <div class="watchlist-stats">
                <span class="stat">
                    <span class="stat-value" id="totalMovies">0</span>
                    <span class="stat-label">Movies</span>
                </span>
                <span class="stat">
                    <span class="stat-value" id="watchedMovies">0</span>
                    <span class="stat-label">Watched</span>
                </span>
            </div>

            <div class="watchlist-filters">
                <div class="search-box">
                    <input type="text" id="searchInput" placeholder="Search your watchlist...">
                </div>
                <div class="filter-buttons">
                    <button class="filter-btn active" data-filter="all">All</button>
                    <button class="filter-btn" data-filter="watched">Watched</button>
                    <button class="filter-btn" data-filter="unwatched">Unwatched</button>
                </div>
            </div>
        </div>
    </section>

    <section class="movies-grid">
        <div class="container">
            <div class="grid" id="watchlistGrid">
                <!-- Movies will be loaded here -->
            </div>

            <div class="empty-state" id="emptyState" style="display: none;">
                <div class="empty-state-content">
                    <h2>Your watchlist is empty</h2>
                    <p>Start adding movies to your watchlist to keep track of what you want to watch.</p>
                    <a href="/search" class="btn primary">Browse Movies</a>
                </div>
            </div>

            <div class="error-message" id="errorMessage" style="display: none;">
                <p id="errorText"></p>
            </div>
        </div>
    </section>

    <Footer slot="footer" />
</MainLayout>

<style>
    .watchlist-section {
        background-color: #f8f9fa;
        padding: 2rem 0;
        text-align: center;
    }

    .watchlist-title {
        margin-bottom: 1.5rem;
        color: #333;
    }

    .watchlist-stats {
        display: flex;
        justify-content: center;
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .stat {
        text-align: center;
    }

    .stat-value {
        display: block;
        font-size: 1.5rem;
        font-weight: bold;
        color: #e94560;
    }

    .stat-label {
        color: #666;
        font-size: 0.9rem;
    }

    .watchlist-filters {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        flex-wrap: wrap;
        margin-bottom: 2rem;
    }

    .search-box input {
        padding: 0.8rem 1rem;
        border: 2px solid #ddd;
        border-radius: 4px;
        width: 300px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

    .search-box input:focus {
        outline: none;
        border-color: #e94560;
    }

    .filter-buttons {
        display: flex;
        gap: 0.8rem;
    }

    .filter-btn {
        padding: 0.8rem 1.5rem;
        border: 2px solid #ddd;
        border-radius: 4px;
        background: white;
        color: #333;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
    }

    .filter-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .filter-btn.active {
        background: #e94560;
        color: white;
        border-color: #e94560;
    }

    .filter-btn.active:hover {
        background: #d13652;
    }

    .movies-grid {
        box-sizing: border-box;
        color: rgb(51, 51, 51);
        display: block;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
        height: 2633.96px;
        line-height: 25.6px;
        margin: 0;
        padding: 48px 0;
        unicode-bidi: isolate;
        width: 1068.8px;
    }

    .grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 1.5rem;
        padding: 1rem 0;
    }

    .movie-card {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .movie-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .movie-poster {
        aspect-ratio: 208.488/312.725;
        background-color: #f5f5f5;
        width: 100%;
    }

    .movie-poster img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .movie-info {
        padding: 1rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .movie-info h3 {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .added-date {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    .movie-meta {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 1rem;
    }

    .year {
        margin: 0.5rem 0;
        color: #888;
        font-size: 0.9rem;
    }

    .movie-actions {
        margin-top: auto;
        padding: 0 1rem 1rem 1rem;
    }

    .movie-card .movie-actions .btn {
        width: 100%;
        padding: 0.8rem;
        border: 2px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        text-align: center;
        background: white;
        color: #333;
        font-size: 1rem;
    }

    .movie-card .movie-actions .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .movie-card .movie-actions .btn-watched {
        border-color: #4CAF50;
        color: #4CAF50;
    }

    .movie-card .movie-actions .btn-watched:hover {
        background: #4CAF50;
        color: white;
    }

    .movie-card .movie-actions .btn-remove {
        border-color: #e94560;
        color: #e94560;
    }

    .movie-card .movie-actions .btn-remove:hover {
        background: #e94560;
        color: white;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 0;
        color: #888;
        background: #2d2d2d;
        border-radius: 12px;
        margin: 2rem 0;
    }

    .empty-state-content {
        max-width: 300px;
        margin: 0 auto;
    }

    .empty-state h2 {
        margin-bottom: 1rem;
        color: white;
        font-size: 1.5rem;
    }

    .empty-state p {
        margin-bottom: 2rem;
        font-size: 1.1rem;
    }

    .btn.primary {
        background: #e94560;
        color: white;
        text-decoration: none;
        padding: 1rem 2rem;
        border-radius: 6px;
        display: inline-block;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn.primary:hover {
        background: #d13652;
        transform: translateY(-2px);
    }

    .error-message {
        background-color: #2d2d2d;
        color: #e94560;
        padding: 1.25rem;
        border-radius: 8px;
        margin: 2rem auto;
        max-width: 800px;
        border: 1px solid #e94560;
    }

    .container {
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    @media (max-width: 768px) {
        .watchlist-stats {
            flex-direction: column;
            gap: 1rem;
        }

        .watchlist-filters {
            flex-direction: column;
            align-items: stretch;
        }

        .search-box input {
            width: 100%;
        }

        .filter-buttons {
            justify-content: center;
        }

        .grid {
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 1rem;
        }

        .movie-info {
            padding: 0.75rem;
        }

        .title {
            font-size: 0.9rem;
        }

        .btn {
            padding: 0.4rem;
            font-size: 0.8rem;
        }
    }

    @media (max-width: 480px) {
        .grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 0.8rem;
        }
    }

    .action-btn {
        width: 100%;
        padding: 0.8rem;
        border: 2px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        text-align: center;
        background: white;
        color: #333;
        font-size: 1rem;
    }

    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .watch-action {
        border-color: #4CAF50;
        color: #4CAF50;
    }

    .watch-action:hover {
        background: #4CAF50;
        color: white;
    }

    .remove-action {
        border-color: #e94560;
        color: #e94560;
    }

    .remove-action:hover {
        background: #e94560;
        color: white;
    }
</style>

<script>
    // Initialize the watchlist functionality
    function initWatchlist() {
        // Get DOM elements
        const watchlistGrid = document.getElementById('watchlistGrid');
        const emptyState = document.getElementById('emptyState');
        const totalMoviesSpan = document.getElementById('totalMovies');
        const watchedMoviesSpan = document.getElementById('watchedMovies');
        const searchInput = document.getElementById('searchInput');
        const filterButtons = document.querySelectorAll('.filter-btn');
        const errorMessageDiv = document.getElementById('errorMessage');
        const errorTextPara = document.getElementById('errorText');

        // Store watchlist items and current filter
        let watchlistItems: { id: number; movieTitle: string; posterUrl: string | null; watched: boolean; addedAt: string; rating: number | null; review: string | null }[] = [];
        let currentFilter = 'all';

        // Show error message
        function showError(message: string) {
            if (errorMessageDiv && errorTextPara) {
                errorTextPara.textContent = message;
                errorMessageDiv.style.display = 'block';
            }
        }

        // Hide error message
        function hideError() {
            if (errorMessageDiv) {
                errorMessageDiv.style.display = 'none';
            }
        }

        // Fetch watchlist from API
        async function fetchWatchlist() {
            hideError();
            try {
                const token = localStorage.getItem('token');
                if (!token) {
                    window.location.href = '/signup';
                    return;
                }

                // Decode the JWT token to get the user ID
                const tokenPayload = JSON.parse(atob(token.split('.')[1]));
                const userId = parseInt(tokenPayload['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier']);

                const response = await fetch(`/api/watchlist?userId=${userId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    if (response.status === 401 || response.status === 403) {
                        localStorage.removeItem('token');
                        window.location.href = '/signup';
                        return;
                    }
                    const errorText = await response.text();
                    throw new Error(`Failed to load watchlist: ${errorText}`);
                }

                const data = await response.json();
                watchlistItems = data;
                updateDisplay();
            } catch (error) {
                console.error('Error fetching watchlist:', error);
                showError(error instanceof Error ? error.message : 'Failed to load watchlist. Please try again.');
            }
        }

        // Update the display based on current filter and search
        function updateDisplay() {
            if (!watchlistGrid || !emptyState) return;

            // Clear current display
            watchlistGrid.innerHTML = '';

            // Get search term
            const searchTerm = searchInput ? (searchInput as HTMLInputElement).value.toLowerCase() : '';

            // Filter items
            let filteredItems = watchlistItems;
            if (currentFilter === 'watched') {
                filteredItems = filteredItems.filter(item => item.watched);
            } else if (currentFilter === 'unwatched') {
                filteredItems = filteredItems.filter(item => !item.watched);
            }

            if (searchTerm) {
                filteredItems = filteredItems.filter(item => 
                    item.movieTitle.toLowerCase().includes(searchTerm)
                );
            }

            // Show empty state or grid
            if (filteredItems.length === 0) {
                emptyState.style.display = 'block';
                watchlistGrid.style.display = 'none';
            } else {
                emptyState.style.display = 'none';
                watchlistGrid.style.display = 'grid';

                // Create movie cards
                filteredItems.forEach(item => {
                    try {
                        const card = document.createElement('div');
                        card.className = 'movie-card';
                        card.innerHTML = `
                            <div class="poster-container">
                                <img src="${item.posterUrl || '/no-image.png'}" 
                                     alt="${item.movieTitle}" 
                                     onerror="this.src='/no-image.png'">
                            </div>
                            <div class="movie-info">
                                <h3 class="title">${item.movieTitle}</h3>
                                <p class="added-date">Added: ${new Date(item.addedAt).toLocaleDateString()}</p>
                                <div class="movie-actions">
                                    <button type="button" 
                                            id="watch-btn-${item.id}" 
                                            data-id="${item.id}"
                                            style="width: 100%; padding: 0.8rem; border: 2px solid #4CAF50; border-radius: 4px; cursor: pointer; transition: all 0.3s ease; font-weight: 600; text-align: center; background: white; color: #4CAF50; font-size: 1rem; margin-bottom: 0.8rem;">
                                        ${item.watched ? 'Watched ✓' : 'Mark as Watched'}
                                    </button>
                                    <button type="button" 
                                            id="remove-btn-${item.id}" 
                                            data-id="${item.id}"
                                            style="width: 100%; padding: 0.8rem; border: 2px solid #e94560; border-radius: 4px; cursor: pointer; transition: all 0.3s ease; font-weight: 600; text-align: center; background: white; color: #e94560; font-size: 1rem;">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        `;

                        // Add hover effects using JavaScript
                        const watchBtn = card.querySelector(`#watch-btn-${item.id}`) as HTMLButtonElement;
                        const removeBtn = card.querySelector(`#remove-btn-${item.id}`) as HTMLButtonElement;

                        if (watchBtn) {
                            watchBtn.addEventListener('mouseover', () => {
                                watchBtn.style.background = '#4CAF50';
                                watchBtn.style.color = 'white';
                                watchBtn.style.transform = 'translateY(-2px)';
                                watchBtn.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';
                            });
                            watchBtn.addEventListener('mouseout', () => {
                                watchBtn.style.background = 'white';
                                watchBtn.style.color = '#4CAF50';
                                watchBtn.style.transform = 'none';
                                watchBtn.style.boxShadow = 'none';
                            });
                        }

                        if (removeBtn) {
                            removeBtn.addEventListener('mouseover', () => {
                                removeBtn.style.background = '#e94560';
                                removeBtn.style.color = 'white';
                                removeBtn.style.transform = 'translateY(-2px)';
                                removeBtn.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';
                            });
                            removeBtn.addEventListener('mouseout', () => {
                                removeBtn.style.background = 'white';
                                removeBtn.style.color = '#e94560';
                                removeBtn.style.transform = 'none';
                                removeBtn.style.boxShadow = 'none';
                            });
                        }

                        watchlistGrid.appendChild(card);
                    } catch (error) {
                        console.error('Error creating movie card:', error);
                    }
                });
            }

            // Update stats
            if (totalMoviesSpan) {
                totalMoviesSpan.textContent = watchlistItems.length.toString();
            }
            if (watchedMoviesSpan) {
                const watchedCount = watchlistItems.filter(item => item.watched).length;
                watchedMoviesSpan.textContent = watchedCount.toString();
            }
        }

        // Add event listeners
        if (searchInput) {
            searchInput.addEventListener('input', updateDisplay);
        }

        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                filterButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                currentFilter = button.getAttribute('data-filter') || 'all';
                updateDisplay();
            });
        });

        // Add event delegation for movie actions
        if (watchlistGrid) {
            watchlistGrid.addEventListener('click', async (e) => {
                const target = e.target as HTMLElement;
                const button = target.closest('button');
                if (!button) return;

                const movieId = button.getAttribute('data-id');
                if (!movieId) return;

                const token = localStorage.getItem('token');
                if (!token) {
                    window.location.href = '/signup';
                    return;
                }

                try {
                    if (button.id.startsWith('watch-btn-')) {
                        // Toggle watched status
                        const item = watchlistItems.find(item => item.id === parseInt(movieId));
                        if (!item) return;

                        const response = await fetch(`/api/watchlist/${movieId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${token}`
                            },
                            body: JSON.stringify({
                                watched: !item.watched,
                                rating: item.rating,
                                review: item.review
                            })
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`Failed to update watched status: ${errorText}`);
                        }

                        // Update local state
                        item.watched = !item.watched;
                        updateDisplay();
                    } else if (button.id.startsWith('remove-btn-')) {
                        // Remove movie from watchlist
                        const response = await fetch(`/api/watchlist/${movieId}`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`Failed to remove movie: ${errorText}`);
                        }

                        // Update local state
                        watchlistItems = watchlistItems.filter(item => item.id !== parseInt(movieId));
                        updateDisplay();
                    }
                } catch (error) {
                    console.error('Error updating watchlist:', error);
                    showError(error instanceof Error ? error.message : 'Failed to update watchlist. Please try again.');
                }
            });
        }

        // Initial load
        fetchWatchlist();
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initWatchlist);
    } else {
        initWatchlist();
    }
</script>
