---
// src/pages/search.astro
import MainLayout from '../layouts/MainLayout.astro';
import Header from '../components/header.astro';
import Footer from '../components/footer.astro';
import MovieCard from '../components/MovieCard.astro';
import { searchMovies, getPopularMovies } from '../services/movieApi.js';

// Get search query from URL params
const { searchQuery } = Astro.params;
const query = Astro.url.searchParams.get('q') || '';
let movies = [];
let error = null;
let totalResults = 0;
let totalPages = 0;
let currentPage = parseInt(Astro.url.searchParams.get('page') || '1');

try {
    // If there's a search query, search for movies
    if (query) {
        const searchResults = await searchMovies(query, currentPage);
        movies = searchResults.results;
        totalResults = searchResults.totalResults;
        totalPages = searchResults.totalPages;
    } else {
        // Otherwise, show popular movies
        const popularMovies = await getPopularMovies(currentPage);
        movies = popularMovies.results;
        totalResults = popularMovies.totalResults;
        totalPages = popularMovies.totalPages;
    }
} catch (e) {
    console.error('Error fetching movies:', e);
    error = 'Failed to load movies. Please try again later.';
}

// Generate pagination links
function generatePaginationLinks(currentPage: number, totalPages: number, query: string) {
    const pages = [];
    
    // Always show first page
    pages.push(1);
    
    // Calculate range around current page
    let startPage = Math.max(2, currentPage - 2);
    let endPage = Math.min(totalPages - 1, currentPage + 2);
    
    // Handle ellipsis for start
    if (startPage > 2) {
        pages.push('...');
    }
    
    // Add pages in range
    for (let i = startPage; i <= endPage; i++) {
        pages.push(i);
    }
    
    // Handle ellipsis for end
    if (endPage < totalPages - 1) {
        pages.push('...');
    }
    
    // Always show last page if there's more than one page
    if (totalPages > 1) {
        pages.push(totalPages);
    }
    
    return pages;
}

const paginationPages = generatePaginationLinks(currentPage, totalPages, query);
---

<MainLayout>
    <Header slot="header" />
    
    <section class="search-section">
        <div class="container">
            <h1 class="search-title">
                {query ? `Search Results for "${query}"` : 'Discover Movies'}
            </h1>
            
            <form class="search-form" action="/search" method="get">
                <input 
                    type="text" 
                    name="q" 
                    placeholder="Search for movies..." 
                    value={query} 
                    class="search-input"
                    required
                />
                <button type="submit" class="search-button">Search</button>
            </form>
            
            {totalResults > 0 && (
                <p class="results-count">Found {totalResults} results</p>
            )}
        </div>
    </section>
    
    {error && (
        <div class="error-message container">
            <p>{error}</p>
        </div>
    )}
    
    <section class="movies-grid">
        <div class="container">
            {movies.length > 0 ? (
                <div class="grid">
                    {movies.map((movie: { id: string | number; title: string; posterUrl: string; year: number; rating: number; }) => (
                        <MovieCard
                            id={movie.id}
                            title={movie.title}
                            posterUrl={movie.posterUrl}
                            year={movie.year}
                            rating={movie.rating}
                            showAddButton={true}
                        />
                    ))}
                </div>
            ) : !error && (
                <div class="no-results">
                    <h2>No movies found</h2>
                    <p>Try adjusting your search terms or browse popular movies.</p>
                </div>
            )}
            
            {/* Pagination */}
            {totalPages > 1 && (
                <div class="pagination">
                    <a 
                        href={`/search?q=${query}&page=${Math.max(1, currentPage - 1)}`}
                        class={`pagination-link ${currentPage === 1 ? 'disabled' : ''}`}
                    >
                        Previous
                    </a>
                    
                    {paginationPages.map((page) => 
                        page === '...' ? (
                            <span class="pagination-ellipsis">...</span>
                        ) : (
                            <a 
                                href={`/search?q=${query}&page=${page}`} 
                                class={`pagination-link ${page === currentPage ? 'active' : ''}`}
                            >
                                {page}
                            </a>
                        )
                    )}
                    
                    <a 
                        href={`/search?q=${query}&page=${Math.min(totalPages, currentPage + 1)}`}
                        class={`pagination-link ${currentPage === totalPages ? 'disabled' : ''}`}
                    >
                        Next
                    </a>
                </div>
            )}
        </div>
    </section>
    
    <Footer slot="footer" />
</MainLayout>

<style>
    .search-section {
        background-color: #f8f9fa;
        padding: 3rem 0;
        text-align: center;
    }
    
    .search-title {
        margin-bottom: 1.5rem;
    }
    
    .search-form {
        display: flex;
        max-width: 600px;
        margin: 0 auto;
    }
    
    .search-input {
        flex-grow: 1;
        padding: 0.8rem 1rem;
        border: 1px solid #ddd;
        border-radius: 4px 0 0 4px;
        font-size: 1rem;
    }
    
    .search-button {
        background-color: #e94560;
        color: white;
        border: none;
        border-radius: 0 4px 4px 0;
        padding: 0.8rem 1.5rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    
    .search-button:hover {
        background-color: #d13652;
    }
    
    .results-count {
        margin-top: 1rem;
        color: #666;
    }
    
    .movies-grid {
        padding: 3rem 0;
    }
    
    .grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 2rem;
    }
    
    .no-results {
        text-align: center;
        padding: 3rem 0;
    }
    
    .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 4px;
        margin: 2rem auto;
        max-width: 800px;
    }
    
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 3rem;
        gap: 0.5rem;
        flex-wrap: wrap;
    }
    
    .pagination-link {
        display: inline-block;
        padding: 0.5rem 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-decoration: none;
        color: #333;
        transition: all 0.3s ease;
    }
    
    .pagination-link:hover:not(.disabled) {
        background-color: #f5f5f5;
    }
    
    .pagination-link.active {
        background-color: #e94560;
        color: white;
        border-color: #e94560;
    }
    
    .pagination-link.disabled {
        color: #aaa;
        cursor: not-allowed;
    }
    
    .pagination-ellipsis {
        padding: 0.5rem 1rem;
        color: #777;
    }
    
    .container {
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
    }
    
    @media (max-width: 768px) {
        .search-form {
            flex-direction: column;
            gap: 0.5rem;
            padding: 0 1rem;
        }
        
        .search-input {
            border-radius: 4px;
        }
        
        .search-button {
            border-radius: 4px;
        }
        
        .grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1.5rem;
        }
    }
</style>

<script>
// Client-side JavaScript for enhancing the search experience
document.addEventListener('DOMContentLoaded', () => {
    // Auto-focus the search input when the page loads
    const searchInput = document.querySelector('.search-input');
    if (searchInput) {
        (searchInput as HTMLInputElement).focus();
    }
    
    // Handle form submission with loading state
    const searchForm = document.querySelector('.search-form');
    const searchButton = document.querySelector('.search-button');
    
    if (searchForm && searchButton) {
        searchForm.addEventListener('submit', (e) => {
            searchButton.textContent = 'Searching...';
            (searchButton as HTMLButtonElement).disabled = true;
            // Form will submit normally
        });
    }
});
</script>